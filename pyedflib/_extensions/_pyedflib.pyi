import numpy as np

__all__ = [
    'FILETYPE_BDF',
    'FILETYPE_BDFPLUS',
    'FILETYPE_EDF',
    'FILETYPE_EDFPLUS',
    'CyEdfReader',
    'EdfAnnotation',
    'blockwrite_digital_samples',
    'blockwrite_digital_short_samples',
    'blockwrite_physical_samples',
    'close_file',
    'get_annotation',
    'get_handle',
    'get_number_of_open_files',
    'is_file_used',
    'lib_version',
    'open_errors',
    'open_file_writeonly',
    'read_int_samples',
    'read_physical_samples',
    'rewind',
    'seek',
    'set_admincode',
    'set_birthdate',
    'set_datarecord_duration',
    'set_digital_maximum',
    'set_digital_minimum',
    'set_equipment',
    'set_gender',
    'set_label',
    'set_number_of_annotation_signals',
    'set_patient_additional',
    'set_patientcode',
    'set_patientname',
    'set_physical_dimension',
    'set_physical_maximum',
    'set_physical_minimum',
    'set_prefilter',
    'set_recording_additional',
    'set_samples_per_record',
    'set_sex',
    'set_startdatetime',
    'set_starttime_subsecond',
    'set_technician',
    'set_transducer',
    'tell',
    'write_annotation_latin1',
    'write_annotation_utf8',
    'write_digital_samples',
    'write_digital_short_samples',
    'write_errors',
    'write_physical_samples',
]

open_errors: dict[int, str]
write_errors: dict[int, str]

FILETYPE_EDF: int
FILETYPE_EDFPLUS: int
FILETYPE_BDF: int
FILETYPE_BDFPLUS: int

def contains_unicode(string: str) -> bool: ...

def get_short_path_name(long_name: str) -> str: ...

def lib_version() -> str: ...

class CyEdfReader:
    def __init__(self, file_name: str, annotations_mode: int = ..., check_file_size: int = ...): ...
    def __dealloc__(self) -> None: ...
    def check_open_ok(self, result: int) -> bool: ...
    def make_buffer(self) -> np.ndarray: ...
    def open(self, file_name: str, annotations_mode: int = ..., check_file_size: int = ...) -> bool: ...
    def read_annotation(self) -> list[list[str]]: ...
    def _close(self) -> None: ...
    def read_digital_signal(self, signalnum: int, start: int, n: int, sigbuf: np.ndarray[np.int32_t]) -> None: ...
    def readsignal(self, signalnum: int, start: int, n: int, sigbuf: np.ndarray[np.float64_t]) -> None: ...
    def load_datarecord(self, db: np.ndarray[np.float64_t], n: int = ...) -> None: ...

    @property
    def file_name(self) -> str: ...

    @file_name.setter
    def file_name(self, value: str) -> None: ...

    @property
    def handle(self) -> int: ...
    @property
    def datarecords_in_file(self) -> int: ...
    @property
    def signals_in_file(self) -> int: ...
    @property
    def file_duration(self) -> float: ...
    @property
    def filetype(self) -> int: ...
    @property
    def patient(self) -> str: ...
    @property
    def recording(self) -> str: ...
    @property
    def datarecord_duration(self) -> float: ...
    @property
    def annotations_in_file(self) -> int: ...
    @property
    def patientcode(self) -> str: ...
    @property
    def sex(self) -> str: ...
    @property
    def gender(self) -> str: ...
    @property
    def birthdate(self) -> str: ...
    @property
    def patientname(self) -> str: ...
    @property
    def patient_additional(self) -> str: ...
    @property
    def startdate_year(self) -> int: ...
    @property
    def startdate_month(self) -> int: ...
    @property
    def startdate_day(self) -> int: ...
    @property
    def starttime_hour(self) -> int: ...
    @property
    def starttime_minute(self) -> int: ...
    @property
    def starttime_second(self) -> int: ...
    @property
    def starttime_subsecond(self) -> int: ...
    @property
    def admincode(self) -> str: ...
    @property
    def technician(self) -> str: ...
    @property
    def equipment(self) -> str: ...
    @property
    def recording_additional(self) -> str: ...

    def signal_label(self, channel: int) -> str: ...
    def samples_in_file(self, channel: int) -> int: ...
    def samples_in_datarecord(self, channel: int) -> int: ...
    def physical_dimension(self, channel: int) -> str: ...
    def physical_max(self, channel: int) -> float: ...
    def physical_min(self, channel: int) -> float: ...
    def digital_max(self, channel: int) -> int: ...
    def digital_min(self, channel: int) -> int: ...
    def prefilter(self, channel: int) -> str: ...
    def transducer(self, channel: int) -> str: ...
    def samplefrequency(self, channel: int) -> float: ...
    def smp_per_record(self, channel: int) -> int: ...

class EdfAnnotation:
    onset: int
    duration: int
    annotation: str

def set_patientcode(handle: int, patientcode: str | bytes) -> int: ...
def write_annotation_latin1(handle: int, onset: int, duration: int, description: str | bytes) -> int: ...
def write_annotation_utf8(handle: int, onset: int, duration: int, description: str | bytes) -> int: ...
def set_technician(handle: int, technician: str | bytes) -> int: ...
def get_annotation(handle: int, n: int, edf_annotation: EdfAnnotation) -> int: ...
def read_int_samples(handle: int, edfsignal: int, n: int, buf: np.ndarray[np.int32_t]) -> int: ...
def blockwrite_digital_samples(handle: int, buf: np.ndarray[np.int32_t]) -> int: ...
def blockwrite_digital_short_samples(handle: int, buf: np.ndarray[np.int16_t]) -> int: ...
def blockwrite_physical_samples(handle: int, buf: np.ndarray[np.float64_t]) -> int: ...
def set_recording_additional(handle: int, recording_additional: str | bytes) -> int: ...
def write_digital_short_samples(handle: int, buf: np.ndarray[np.int16_t]) -> int: ...
def write_physical_samples(handle: int, buf: np.ndarray[np.float64_t]) -> int: ...
def set_patientname(handle: int, name: str | bytes) -> int: ...
def set_physical_minimum(handle: int, edfsignal: int, phys_min: float) -> int: ...
def read_physical_samples(handle: int, edfsignal: int, n: int, buf: np.ndarray[np.float64_t]) -> int: ...
def close_file(handle: int) -> int: ...
def get_number_of_open_files() -> int: ...
def get_handle(file_number: int) -> int: ...
def is_file_used(path: str) -> bool: ...
def set_physical_maximum(handle: int, edfsignal: int, phys_max: float) -> int: ...
def open_file_writeonly(path: str, filetype: int, number_of_signals: int) -> int: ...
def set_patient_additional(handle: int, patient_additional: str | bytes) -> int: ...
def set_digital_maximum(handle: int, edfsignal: int, dig_max: int) -> int: ...
def set_birthdate(handle: int, birthdate_year: int, birthdate_month: int, birthdate_day: int) -> int: ...
def set_digital_minimum(handle: int, edfsignal: int, dig_min: int) -> int: ...
def write_digital_samples(handle: int, buf: np.ndarray[np.int32_t]) -> int: ...
def set_equipment(handle: int, equipment: str | bytes) -> int: ...
def set_samples_per_record(handle: int, edfsignal: int, smp_per_record: int) -> int: ...
def set_admincode(handle: int, admincode: str | bytes) -> int: ...
def set_label(handle: int, edfsignal: int, label: str | bytes) -> int: ...
def tell(handle: int, edfsignal: int) -> int: ...
def rewind(handle: int, edfsignal: int) -> None: ...
def set_sex(handle: int, sex: int | None) -> int: ...
def set_gender(handle: int, gender: int) -> int: ...
def set_physical_dimension(handle: int, edfsignal: int, phys_dim: str | bytes) -> int: ...
def set_transducer(handle: int, edfsignal: int, transducer: str | bytes) -> int: ...
def set_prefilter(handle: int, edfsignal: int, prefilter: str | bytes) -> int: ...
def seek(handle: int, edfsignal: int, offset: int, whence: int) -> int: ...
def set_startdatetime(handle: int, startdate_year: int, startdate_month: int, startdate_day: int,
                      starttime_hour: int, starttime_minute: int, starttime_second: int) -> int: ...
def set_starttime_subsecond(handle: int, subsecond: int) -> int: ...
def set_datarecord_duration(handle: int, duration: int | float) -> int: ...
def set_number_of_annotation_signals(handle: int, annot_signals: int) -> int: ...
